from _typeshed import Incomplete
from pyarrow._fs import FileInfo as FileInfo, FileSelector as FileSelector, FileSystem as FileSystem, FileSystemHandler as FileSystemHandler, FileType as FileType, LocalFileSystem as LocalFileSystem, PyFileSystem as PyFileSystem, SubTreeFileSystem as SubTreeFileSystem
from pyarrow._gcsfs import GcsFileSystem as GcsFileSystem
from pyarrow._hdfs import HadoopFileSystem as HadoopFileSystem
from pyarrow._s3fs import AwsDefaultS3RetryStrategy as AwsDefaultS3RetryStrategy, AwsStandardS3RetryStrategy as AwsStandardS3RetryStrategy, S3FileSystem as S3FileSystem, S3LogLevel as S3LogLevel, S3RetryStrategy as S3RetryStrategy, finalize_s3 as finalize_s3, initialize_s3 as initialize_s3, resolve_s3_region as resolve_s3_region

FileStats = FileInfo

def __getattr__(name) -> None: ...
def copy_files(source, destination, source_filesystem: Incomplete | None = ..., destination_filesystem: Incomplete | None = ..., *, chunk_size=..., use_threads: bool = ...) -> None: ...

class FSSpecHandler(FileSystemHandler):
    fs: Incomplete
    def __init__(self, fs) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def get_type_name(self): ...
    def normalize_path(self, path): ...
    def get_file_info(self, paths): ...
    def get_file_info_selector(self, selector): ...
    def create_dir(self, path, recursive) -> None: ...
    def delete_dir(self, path) -> None: ...
    def delete_dir_contents(self, path, missing_dir_ok) -> None: ...
    def delete_root_dir_contents(self) -> None: ...
    def delete_file(self, path) -> None: ...
    def move(self, src, dest) -> None: ...
    def copy_file(self, src, dest) -> None: ...
    def open_input_stream(self, path): ...
    def open_input_file(self, path): ...
    def open_output_stream(self, path, metadata): ...
    def open_append_stream(self, path, metadata): ...
