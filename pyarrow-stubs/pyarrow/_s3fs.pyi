from typing import Any, ClassVar

from typing import overload
import collections.abc
import enum
import importlib._bootstrap
import pyarrow._fs
import pyarrow.lib
Debug: importlib._bootstrap.S3LogLevel
Error: importlib._bootstrap.S3LogLevel
Fatal: importlib._bootstrap.S3LogLevel
Info: importlib._bootstrap.S3LogLevel
Off: importlib._bootstrap.S3LogLevel
Trace: importlib._bootstrap.S3LogLevel
Warn: importlib._bootstrap.S3LogLevel

class AwsDefaultS3RetryStrategy(S3RetryStrategy): ...

class AwsStandardS3RetryStrategy(S3RetryStrategy): ...

class KeyValueMetadata(pyarrow.lib._Metadata, collections.abc.Mapping):
    __hash__: ClassVar[None] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def equals(self, KeyValueMetadataother) -> Any: ...
    def get_all(self, key) -> Any: ...
    def items(self) -> Any: ...
    def key(self, i) -> Any: ...
    def keys(self) -> Any: ...
    def to_dict(self) -> Any: ...
    def value(self, i) -> Any: ...
    def values(self) -> Any: ...
    def __contains__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __iter__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...

class S3FileSystem(pyarrow._fs.FileSystem):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    region: Any
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def _reconstruct(cls, typecls, kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...

class S3LogLevel(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def as_integer_ratio(self) -> Any: ...
        @overload
        def as_integer_ratio(self) -> Any: ...
        @overload
        def as_integer_ratio(self) -> Any: ...
        def bit_count(self) -> Any: ...
        def bit_length(self) -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    Debug: ClassVar[importlib._bootstrap.S3LogLevel] = ...
    Error: ClassVar[importlib._bootstrap.S3LogLevel] = ...
    Fatal: ClassVar[importlib._bootstrap.S3LogLevel] = ...
    Info: ClassVar[importlib._bootstrap.S3LogLevel] = ...
    Off: ClassVar[importlib._bootstrap.S3LogLevel] = ...
    Trace: ClassVar[importlib._bootstrap.S3LogLevel] = ...
    Warn: ClassVar[importlib._bootstrap.S3LogLevel] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[dict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class S3RetryStrategy:
    def __init__(self, max_attempts = ...) -> Any: ...

def __pyx_unpickle___Pyx_EnumMeta(*args, **kwargs) -> Any: ...
def finalize_s3() -> Any: ...
def frombytes(*args, **kwargs) -> Any: ...
def initialize_s3(S3LogLevellog_level = ...) -> Any: ...
def resolve_s3_region(bucket) -> Any: ...
def tobytes(o) -> Any: ...
