import pyarrow.lib as lib
from _typeshed import Incomplete
from pyarrow.lib import IpcReadOptions as IpcReadOptions, IpcWriteOptions as IpcWriteOptions, Message as Message, MessageReader as MessageReader, MetadataVersion as MetadataVersion, ReadStats as ReadStats, RecordBatchReader as RecordBatchReader, WriteStats as WriteStats, get_record_batch_size as get_record_batch_size, get_tensor_size as get_tensor_size, read_message as read_message, read_record_batch as read_record_batch, read_schema as read_schema, read_tensor as read_tensor, write_tensor as write_tensor

class RecordBatchStreamReader(lib._RecordBatchStreamReader):
    def __init__(self, source, *, options: Incomplete | None = ..., memory_pool: Incomplete | None = ...) -> None: ...

class RecordBatchStreamWriter(lib._RecordBatchStreamWriter):
    __doc__: Incomplete
    def __init__(self, sink, schema, *, use_legacy_format: Incomplete | None = ..., options: Incomplete | None = ...) -> None: ...

class RecordBatchFileReader(lib._RecordBatchFileReader):
    def __init__(self, source, footer_offset: Incomplete | None = ..., *, options: Incomplete | None = ..., memory_pool: Incomplete | None = ...) -> None: ...

class RecordBatchFileWriter(lib._RecordBatchFileWriter):
    __doc__: Incomplete
    def __init__(self, sink, schema, *, use_legacy_format: Incomplete | None = ..., options: Incomplete | None = ...) -> None: ...

def new_stream(sink, schema, *, use_legacy_format: Incomplete | None = ..., options: Incomplete | None = ...): ...
def open_stream(source, *, options: Incomplete | None = ..., memory_pool: Incomplete | None = ...): ...
def new_file(sink, schema, *, use_legacy_format: Incomplete | None = ..., options: Incomplete | None = ...): ...
def open_file(source, footer_offset: Incomplete | None = ..., *, options: Incomplete | None = ..., memory_pool: Incomplete | None = ...): ...
def serialize_pandas(df, *, nthreads: Incomplete | None = ..., preserve_index: Incomplete | None = ...): ...
def deserialize_pandas(buf, *, use_threads: bool = ...): ...
