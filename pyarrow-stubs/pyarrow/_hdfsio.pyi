from typing import Any, ClassVar

import pyarrow.lib
import re
_HDFS_PATH_RE: re.Pattern

class ArrowIOError(Exception):
    characters_written: Any
    errno: Any
    filename: Any
    filename2: Any
    strerror: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...

class HadoopFileSystem(pyarrow.lib._Weakrefable):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    extra_conf: Any
    host: Any
    is_open: Any
    kerb_ticket: Any
    port: Any
    user: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def _connect(self, host, port, user, kerb_ticket, extra_conf) -> Any: ...
    def chmod(self, path, mode) -> Any: ...
    def chown(self, path, owner = ..., group = ...) -> Any: ...
    def close(self) -> Any: ...
    @classmethod
    def connect(cls, typecls, *args, **kwargs) -> Any: ...
    def delete(self, path, boolrecursive = ...) -> Any: ...
    def df(self) -> Any: ...
    def download(self, path, stream, buffer_size = ...) -> Any: ...
    def exists(self, path) -> Any: ...
    def get_capacity(self) -> Any: ...
    def get_space_used(self) -> Any: ...
    def info(self, path) -> Any: ...
    def isdir(self, path) -> Any: ...
    def isfile(self, path) -> Any: ...
    def ls(self, path, boolfull_info) -> Any: ...
    def mkdir(self, path) -> Any: ...
    def open(self, path, mode = ..., buffer_size = ..., replication = ..., default_block_size = ...) -> Any: ...
    def rename(self, path, new_path) -> Any: ...
    def stat(self, path) -> Any: ...
    def upload(self, path, stream, buffer_size = ...) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class HdfsFile(pyarrow.lib.NativeFile):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    buffer_size: Any
    mode: Any
    parent: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Queue:
    __init__: ClassVar[function] = ...
    _get: ClassVar[function] = ...
    _init: ClassVar[function] = ...
    _put: ClassVar[function] = ...
    _qsize: ClassVar[function] = ...
    empty: ClassVar[function] = ...
    full: ClassVar[function] = ...
    get: ClassVar[function] = ...
    get_nowait: ClassVar[function] = ...
    join: ClassVar[function] = ...
    put: ClassVar[function] = ...
    put_nowait: ClassVar[function] = ...
    qsize: ClassVar[function] = ...
    task_done: ClassVar[function] = ...
    @classmethod
    def __class_getitem__(cls, *args, **kwargs) -> Any: ...

class QueueEmpty(Exception): ...

class QueueFull(Exception): ...

class _HdfsFileNanny(pyarrow.lib._Weakrefable):
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

def frombytes(*args, **kwargs) -> Any: ...
def have_libhdfs() -> Any: ...
def strip_hdfs_abspath(path) -> Any: ...
def tobytes(o) -> Any: ...
